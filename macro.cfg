#[gcode_macro G1]
#rename_existing: G1.1
#gcode:
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2 
 # m117
  #RESTORE_GCODE_STATE NAME=G1
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.1 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.1 
  #m117

[gcode_shell_command plot_graph]
command: bash /home/mrx/printer_data/config/scripts/plot_graphs.sh
timeout: 300.0
verbose: True

[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro HEAT_CHAMBER]
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=130
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G1 Z0.5 X60 Y60 F{printer.toolhead.max_velocity * 60}
    #SET_FAN_SPEED FAN=bed_fans SPEED=100
    SET_PIN PIN=Power_logka VALUE=1
    M106 S153
    M84

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
     PRINT_END
     CLEAR_PAUSE
     SDCARD_RESET_FILE
     BASE_CANCEL_PRINT

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode: 
    G92 E0    
    G0 E20 F2400       
    G92 E0
    G0 F{printer.toolhead.max_velocity * 60}                                   
    RESTORE_GCODE_STATE NAME=PAUSE_STATE
    BASE_RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G1 E-5 F2400                                                           
    G1 X60 Y1 Z{[printer.toolhead.position.z + 5, printer.toolhead.axis_maximum.z]|min} F{printer.toolhead.max_velocity * 60}
    G1 E-15 F800

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(80) %}
    {% set EXT_TEMP = params.EXT_TEMP|default(200) %}
    {% set purge_nozzle = False|default(False) %}
    CLEAR_PAUSE
    M140 S{BED_TEMP}
    _PRINT_AR T="WAIT B{BED_TEMP} E{EXT_TEMP}"
    M109 S{EXT_TEMP}
    M190 S{BED_TEMP}
    SET_PIN PIN=Power_logka VALUE=1
    #SET_FAN_SPEED FAN=bed_fans SPEED=0
    M106 S0
    G28
    PRIME_LINE

[gcode_macro PRIME_LINE]
gcode:
    G0 X40 Y0 F{printer.toolhead.max_velocity * 60}
    G0 Z0.6
    G1 E18 F2400
    G92 E0
    M83
    G91
    G1 X40 E16 F1800
    G92 E0
    G90
    G0 F{printer.toolhead.max_velocity * 60}

[gcode_macro PRINT_TEST]
gcode:
    _PRINT_AR T="{2+2+cos(90)|float}"
    # {% set lines = 24|int %}
    # {% set line_dist = 40|int %}
    # {% set angle = -15|int %}
    # {% set center = printer.toolhead.axis_maximum|float / 2 %}
    

    # {% for REPEATT in range(lines) %}
    #   _PRINT_AR T="{angle}"
    #   {% set angle = angle + 15 %}
    #   _PRINT_AR T="{angle}"
    #   _PRINT_AR T=" X{ center[0] + [line_dist * cos(angle)]} Y{center[1] + [line_dist * sin(angle)] } "
    # {% endfor %}


[gcode_macro PRINT_END]
gcode: 
     SAVE_GCODE_STATE NAME=STATE_PRINT_END
     TURN_OFF_HEATERS
     G92 E0
     G1 E-5 F2400
     G1 F{printer.toolhead.max_velocity * 60} X{printer.toolhead.axis_maximum.x - 1} Y{printer.toolhead.axis_maximum.y - 1}
     G1 E-15 F800
     M84
     M107
     SET_PIN PIN=Power_logka VALUE=0
     #SET_FAN_SPEED FAN=TMC2209_fan SPEED=0
     RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro Save_Pressure_Advance]
description: Save the current pressure advance value
variable_pa: -1
gcode:
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=Save_Pressure_Advance VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro Restore_Pressure_Advance]
description: Restore saved pressure advance value
gcode:
    {% if not (printer["gcode_macro Save_Pressure_Advance"].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro Save_Pressure_Advance"].pa}
    {% endif %}

[gcode_macro ACCELTEST]
gcode:
    {% set speed = params.SPEED|default(200)|int %}
    {% set amin = params.AMIN|default(5000)|float %}
    {% set amax = params.AMAX|default(5000)|float %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set lines = 24|int %}
    {% set line_dist = 40|int %}
    {% set angle = -15|int %}
    {% set center = printer.toolhead.axis_maximum|float / 2 %}

    SAVE_GCODE_STATE NAME=speedtest_state
    G91
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if amin == amax %}
                    {% set feedrate = amin %}
                {% else %}
                    {% set feedrate = amin + ( (amax - amin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate)}
                M118 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate)}
                SET_VELOCITY_LIMIT ACCEL={feedrate} 
                SET_VELOCITY_LIMIT ACCEL_TO_DECEL={feedrate}
                G1 F{speed} # set feedrate for the round

                {% for REPEATT in range(lines) %}
                  {% set angle = angle + 15 %}
                  G1 X{center[0] + [line_dist * cos(angle)]} Y{center[1] + [line_dist * sin(angle)]}
                {% endfor %}
            {% endfor %}
        {% endfor %}
    M117
    RESTORE_GCODE_STATE NAME=speedtest_state


[gcode_macro SPEEDTEST]
gcode:
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(500)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}

    {% set inset = 10.0|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    #{% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    #{% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    {% set minX = inset %}
    {% set minY = inset %}
    
    SAVE_GCODE_STATE NAME=speedtest_state
    G90
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                M118 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    M117
    RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro RESONANCES_TEST_X]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                        
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro RESONANCES_TEST_Y]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                        
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                         'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                'y' : [min.y,(min.y-probe_offset.y)]|max},
                       'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
                        Min X:%7.1f, Y:%7.1f, Z:%7.1f
                        Max X:%7.1f, Y:%7.1f, Z:%7.1f
                        Probe Area Limits:
                        Min X:%7.1f, Y:%7.1f
                        Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  Macros needed for several debug activities
#####################################################################


